---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce=18.06.3~ce~3-0~ubuntu
      #- docker-ce-cli=18.06.3~ce~3-0~ubuntu
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.13.5-00
        - kubeadm=1.13.5-00
        - kubectl=1.13.5-00

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

  - name: Edit the Kubelet config to add --node-ip={{ ansible_eth0.ipv4.address }} 
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: '^\s*Environment="KUBELET_CONFIG_ARGS"*$'
      line: 'Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --node-ip={{ ansible_eth1.ipv4.address }} "'

  - name: Daemon-Reload and Kubelet Restart
    systemd:
      state: restarted
      daemon_reload: yes
      name: kubelet

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -f /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

  - name: Download the calico config file
    become: false
    get_url:
      url: https://docs.projectcalico.org/v3.6/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
      dest: /home/vagrant/calico.yaml

  - name: Deploy calico to the cluster
    become: false
    command: kubectl create -f /home/vagrant/calico.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - debug:
      var: join_command

  - name: Copy join command to local file
    copy: content="{{ join_command.stdout_lines[0] }}" dest="/tmp/join-command"

  - name: Fetch the join command to the local machine
    fetch: src=/tmp/join-command dest=join-command.sh flat=yes
  
  handlers:
    - name: docker status
      service: name=docker state=started
